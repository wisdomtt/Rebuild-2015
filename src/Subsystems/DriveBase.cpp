// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveBase.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/TeleopDrive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

DriveBase::DriveBase() : Subsystem("DriveBase") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontLeft = RobotMap::driveBaseFrontLeft;
	backLeft = RobotMap::driveBaseBackLeft;
	frontRight = RobotMap::driveBaseFrontRight;
	backRight = RobotMap::driveBaseBackRight;
	dbTank = RobotMap::driveBasedbTank;
	dbGyro = RobotMap::driveBasedbGyro;
	dbLeftEncoder = RobotMap::driveBasedbLeftEncoder;
	dbRightEncoder = RobotMap::driveBasedbRightEncoder;
	dbMidEncoder = RobotMap::driveBasedbMidEncoder;
	middleLeft = RobotMap::driveBaseMiddleLeft;
	middleRight = RobotMap::driveBaseMiddleRight;
	dbMiddle = RobotMap::driveBasedbMiddle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	dbSigmoid = new ghettoPID(1.0, 0.5, "dbghettoPID");
	dbLeftEncoder->SetDistancePerPulse(DRIVE_DISTANCE_PER_PULSE);
	dbRightEncoder->SetDistancePerPulse(DRIVE_DISTANCE_PER_PULSE);
	dbMidEncoder->SetDistancePerPulse(MIDDLE_DISTANCE_PER_PULSE);
}
    
void DriveBase::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveBase::Strafe(float speed) {
	this->middleLeft->Set(speed);
	this->middleRight->Set(speed);
}

void DriveBase::TDrive(float left, float right) {
	this->dbTank->TankDrive(-left , -right );
}

void DriveBase::Drive(float left, float right, float strafe) {
	this->TDrive(left, right);
	this->Strafe(strafe);
}

void DriveBase::JDrive(Joystick* LeftStick, Joystick* RightStick) {
	// this->Drive(LeftStick->GetY(), RightStick->GetY(), RightStick->GetX());
	if (RightStick->GetRawButton(1)) {
		this->Drive(LeftStick->GetY() * .85, RightStick->GetY(), RightStick->GetX()); // account for the borkyness
	} else {
		this->Drive(LeftStick->GetY(), RightStick->GetY(), 0.0);
	}
//	if (RightStick->GetRawButton(1)) {
//			this->Drive(0.0 , 0.0, RightStick->GetX());
//		} else {
//			this->Drive(0.0, RightStick->GetY(), 0.0);
//		}
}

void DriveBase::ResetGyro() {
	this->dbGyro->Reset();
}

void DriveBase::ResetEncoder(int x) {
	switch (x) {
	case LEFT:
		this->dbLeftEncoder->Reset();
		break;
	case RIGHT:
		this->dbRightEncoder->Reset();
		break;
	case MIDDLE:
		this->dbMidEncoder->Reset();
		break;
	case Y_AXIS:
		this->dbLeftEncoder->Reset();
		this->dbRightEncoder->Reset();
		break;
	default:
		this->dbLeftEncoder->Reset();
		this->dbRightEncoder->Reset();
		this->dbMidEncoder->Reset();
		break;
	}
}

double DriveBase::GetDistance(int x) {
	switch (x) {
	case LEFT:
		return this->dbLeftEncoder->GetDistance();
		break;
	case RIGHT:
		return this->dbRightEncoder->GetDistance();
		break;
	case MIDDLE:
		return this->dbMidEncoder->GetDistance();
		break;
	case Y_AXIS:
		return (this->dbLeftEncoder->GetDistance() + this->dbRightEncoder->GetDistance()) / 2;
		break;
	default:
		return (this->dbLeftEncoder->GetDistance() + this->dbRightEncoder->GetDistance()) / 2;
		break;
	}
}

float DriveBase::GetAngle() {
	return this->dbGyro->GetAngle();
}

void DriveBase::GetEncoder() {
	SmartDashboard::PutNumber("Left Encoder", dbLeftEncoder->GetDistance());
	SmartDashboard::PutNumber("Right Encoder", dbRightEncoder->GetDistance());
	SmartDashboard::PutNumber("Middle Encoder", dbMidEncoder->GetDistance());
}

void DriveBase::DoNothing() {
	this->dbTank->TankDrive(0.0, 0.0);
	this->middleLeft->Set(0.0);
	this->middleRight->Set(0.0);
}


